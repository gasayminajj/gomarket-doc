openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Market Service API'

tags:
  - name: 'AdminAPI'

paths:
  # PRODUCTS API

  /api/v1/products:
    get:
      tags:
        - AdminAPI
      summary: 'Get all products'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleQuery'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - AdminAPI
      summary: 'Add a new product'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: 'Product created'
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/products/{id}:
    get:
      tags:
        - AdminAPI
      summary: 'Get a product by ID'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'ID of product to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: 'Product already exists'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product already exists'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - AdminAPI
      summary: 'Update a product'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'ID of product to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: 'Product updated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - AdminAPI
      summary: 'Delete a product'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'ID of product to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Product deleted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # USERS API

  /api/v1/users:
    get:
      tags:
        - AdminAPI
      summary: 'Get all users'
      requestBody: 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleQuery'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - AdminAPI
      summary: 'Add a new user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 'User created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: 'User already exists'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User already exists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/{id}:
    get:
      tags:
        - AdminAPI
      summary: 'Get a user by ID'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'ID of user to return'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - AdminAPI
      summary: 'Update a user'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'ID of user to update'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'User updated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - AdminAPI
      summary: 'Delete a user'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'ID of user to delete'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'User deleted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  responses:
    NoContent:
      description: 'No content'
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                example: []
    BadRequest:
      description: 'Bad request'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    InternalServerError:
      description: 'Internal server error'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  schemas:
    SimpleQuery:
      type: 'object'
      properties:
        limit:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
    Product:
      type: 'object'
      properties:
        id:
          type: integer
          format: int64
        name:
          type: 'string'
        price:
          type: 'number'
          format: 'double'
    User:
      type: 'object'
      properties:
        id:
          type: integer
          format: int64
        name:
          type: 'string'
        email:
          type: 'string'
          format: 'email'
        bonuses:
          type: 'integer'
          format: int64
  securitySchemes:
    SessionAuth:
      type: 'apiKey'
      in: 'header'
      name: 'SESSION-ID'
security:
  - SessionAuth: []
